// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = createValidator;

var _textlint = require("textlint");

function createValidator() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var textlint = new _textlint.TextLintCore();
    var rules = options.rules || {};
    var rulesConfig = options.rulesConfig || {};
    var Processors = options.Processors || [];
    textlint.setupRules(rules, rulesConfig);
    Processors.forEach(function (Processor) {
        textlint.addProcessor(Processor);
    });
    function convertSeverity(severity) {
        switch (severity) {
            case 1:
                return "warning";
            case 2:
                return "error";
            default:
                return "error";
        }
    }

    return function textlintValidator(text, updateLinting) {
        textlint.lintMarkdown(text).then(function (result) {
            var results = [];
            result.messages.forEach(function (message) {
                // https://codemirror.net/doc/manual.html
                // the API uses objects with line and ch properties. Both are zero-based.
                var posFrom = { line: message.line - 1, ch: message.column - 1 };
                var posTo = { line: message.line - 1, ch: message.column };
                results.push({
                    from: posFrom,
                    to: posTo,
                    message: message.message,
                    severity: convertSeverity(message.severity)
                });
            });
            updateLinting(results);
        });
    };
}
module.exports = exports['default'];
//# sourceMappingURL=codemirror-textlint.js.map
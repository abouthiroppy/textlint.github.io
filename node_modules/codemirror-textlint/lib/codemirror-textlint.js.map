{"version":3,"sources":["../src/codemirror-textlint.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;kBAEW,eAAe;;;;AAAxB,SAAS,eAAe,GAAe;QAAd,OAAO,yDAAG,EAAE;;AAChD,QAAM,QAAQ,GAAG,cAFb,YAAY,EAEmB,CAAC;AACpC,QAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;AAClC,QAAM,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC;AAC9C,QAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;AAC5C,YAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;AACxC,cAAU,CAAC,OAAO,CAAC,UAAA,SAAS,EAAI;AAC5B,gBAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KACpC,CAAC,CAAC;AACH,aAAS,eAAe,CAAC,QAAQ,EAAE;AAC/B,gBAAQ,QAAQ;AACZ,iBAAK,CAAC;AACF,uBAAO,SAAS,CAAC;AAAA,AACrB,iBAAK,CAAC;AACF,uBAAO,OAAO,CAAC;AAAA,AACnB;AACI,uBAAO,OAAO,CAAC;AAAA,SACtB;KACJ;;AAED,WAAO,SAAS,iBAAiB,CAAC,IAAI,EAAE,aAAa,EAAE;AACnD,gBAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;AACvC,gBAAM,OAAO,GAAG,EAAE,CAAC;AACnB,kBAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO,EAAI;;;AAG/B,oBAAM,OAAO,GAAG,EAAC,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,EAAC,CAAC;AACjE,oBAAM,KAAK,GAAG,EAAC,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,EAAC,CAAC;AAC3D,uBAAO,CAAC,IAAI,CAAC;AACT,wBAAI,EAAE,OAAO;AACb,sBAAE,EAAE,KAAK;AACT,2BAAO,EAAE,OAAO,CAAC,OAAO;AACxB,4BAAQ,EAAE,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC;iBAC9C,CAAC,CAAC;aACN,CAAC,CAAC;AACH,yBAAa,CAAC,OAAO,CAAC,CAAC;SAC1B,CAAC,CAAC;KACN,CAAC;CACL","file":"codemirror-textlint.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {TextLintCore} from \"textlint\";\nexport default function createValidator(options = {}) {\n    const textlint = new TextLintCore();\n    const rules = options.rules || {};\n    const rulesConfig = options.rulesConfig || {};\n    const Processors = options.Processors || [];\n    textlint.setupRules(rules, rulesConfig);\n    Processors.forEach(Processor => {\n        textlint.addProcessor(Processor);\n    });\n    function convertSeverity(severity) {\n        switch (severity) {\n            case 1:\n                return \"warning\";\n            case 2:\n                return \"error\";\n            default:\n                return \"error\";\n        }\n    }\n\n    return function textlintValidator(text, updateLinting) {\n        textlint.lintMarkdown(text).then(result => {\n            const results = [];\n            result.messages.forEach(message => {\n                // https://codemirror.net/doc/manual.html\n                // the API uses objects with line and ch properties. Both are zero-based.\n                const posFrom = {line: message.line - 1, ch: message.column - 1};\n                const posTo = {line: message.line - 1, ch: message.column};\n                results.push({\n                    from: posFrom,\n                    to: posTo,\n                    message: message.message,\n                    severity: convertSeverity(message.severity)\n                });\n            });\n            updateLinting(results);\n        });\n    };\n}"]}
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * Fixes props for virtual-dom's consumption
 */

module.exports = function fixProps(props) {
  if (props) {
    // class => className
    // TODO properly omit `class`
    if (props.class) props = _extends({}, props, { class: undefined, className: props.class });

    // See https://github.com/Matt-Esch/virtual-dom/blob/master/docs/vnode.md#propertiesstyle-vs-propertiesattributesstyle
    if (typeof props.style === 'string') {
      props = _extends({}, props, { attributes: _extends({}, props.attributes || {}, { style: props.style }) });
    }

    // onClick => onclick
    Object.keys(props).forEach(function (key) {
      var _extends2;

      var m = key.match(/^on([A-Z][a-z]+)$/);
      if (m) props = _extends({}, props, (_extends2 = {}, _defineProperty(_extends2, key, undefined), _defineProperty(_extends2, key.toLowerCase(), props[key]), _extends2));
    });
  }

  return props;
};
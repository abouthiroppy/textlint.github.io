// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = textlintRuleAlex;

var _textlintRuleHelper = require("textlint-rule-helper");

var _alex = require("alex");

var _alex2 = _interopRequireDefault(_alex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
    allow: []
};
function textlintRuleAlex(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;

    var helper = new _textlintRuleHelper.RuleHelper(context);
    var allowWords = options.allow || defaultOptions.allow;
    /*
    { [1:5-1:14: `boogeyman` may be insensitive, use `boogey` instead]
    message: '`boogeyman` may be insensitive, use `boogey` instead',
    name: '1:5-1:14',
    file: '',
    reason: '`boogeyman` may be insensitive, use `boogey` instead',
    line: 1,
    column: 5,
    location: Position { start: [Object], end: [Object] },
    fatal: false,
    ruleId: 'boogeyman-boogeywoman',
    source: 'retext-equality' }
     */
    var reportError = function reportError(node, result) {
        var ruleError = new RuleError("[" + result.ruleId + "] " + result.message, {
            line: result.line - 1,
            column: result.column - 1
        });
        report(node, ruleError);
    };
    return _defineProperty({}, Syntax.Str, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        var text = getSource(node);
        var messages = _alex2.default.text(text, allowWords).messages;
        messages.forEach(function (result) {
            reportError(node, result);
        });
    });
}
module.exports = exports['default'];
//# sourceMappingURL=textlint-rule-alex.js.map
{"version":3,"sources":["../src/textlint-rule-alex.js"],"names":[],"mappings":";AACA;;;;;kBAMwB;;;;;;;;;;;;AAHxB,IAAM,iBAAiB;AACnB,WAAO,EAAP;CADE;AAGS,SAAS,gBAAT,CAA0B,OAA1B,EAAiD;QAAd,gEAAU,kBAAI;QACrD,SAAwC,QAAxC,OADqD;QAC7C,YAAgC,QAAhC,UAD6C;QAClC,SAAqB,QAArB,OADkC;QAC1B,YAAa,QAAb,UAD0B;;AAE5D,QAAM,SAAS,mCAAe,OAAf,CAAT,CAFsD;AAG5D,QAAM,aAAa,QAAQ,KAAR,IAAiB,eAAe,KAAf;;;;;;;;;;;;;;AAHwB,QAiBtD,cAAc,SAAd,WAAc,CAAC,IAAD,EAAO,MAAP,EAAkB;AAClC,YAAM,YAAY,IAAI,SAAJ,OAAkB,OAAO,MAAP,UAAkB,OAAO,OAAP,EAAkB;AACpE,kBAAM,OAAO,IAAP,GAAc,CAAd;AACN,oBAAQ,OAAO,MAAP,GAAgB,CAAhB;SAFM,CAAZ,CAD4B;AAKlC,eAAO,IAAP,EAAa,SAAb,EALkC;KAAlB,CAjBwC;AAwB5D,+BACK,OAAO,GAAP,YAAY,MAAK;AACd,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,CAAC,OAAO,IAAP,EAAa,OAAO,KAAP,EAAc,OAAO,UAAP,EAAmB,OAAO,QAAP,CAAxE,CAAJ,EAA+F;AAC3F,mBAD2F;SAA/F;AAGA,YAAM,OAAO,UAAU,IAAV,CAAP,CAJQ;AAKd,YAAM,WAAW,eAAK,IAAL,CAAU,IAAV,EAAgB,UAAhB,EAA4B,QAA5B,CALH;AAMd,iBAAS,OAAT,CAAiB,UAAC,MAAD,EAAY;AACzB,wBAAY,IAAZ,EAAkB,MAAlB,EADyB;SAAZ,CAAjB,CANc;MADtB,CAxB4D;CAAjD","file":"textlint-rule-alex.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport alex from \"alex\";\nconst defaultOptions = {\n    allow: []\n};\nexport default function textlintRuleAlex(context, options = {}) {\n    const {Syntax, RuleError, report, getSource} = context;\n    const helper = new RuleHelper(context);\n    const allowWords = options.allow || defaultOptions.allow;\n    /*\n    { [1:5-1:14: `boogeyman` may be insensitive, use `boogey` instead]\n    message: '`boogeyman` may be insensitive, use `boogey` instead',\n    name: '1:5-1:14',\n    file: '',\n    reason: '`boogeyman` may be insensitive, use `boogey` instead',\n    line: 1,\n    column: 5,\n    location: Position { start: [Object], end: [Object] },\n    fatal: false,\n    ruleId: 'boogeyman-boogeywoman',\n    source: 'retext-equality' }\n     */\n    const reportError = (node, result) => {\n        const ruleError = new RuleError(`[${result.ruleId}] ${result.message}`, {\n            line: result.line - 1,\n            column: result.column - 1\n        });\n        report(node, ruleError);\n    };\n    return {\n        [Syntax.Str](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            const messages = alex.text(text, allowWords).messages;\n            messages.forEach((result) => {\n                reportError(node, result);\n            });\n        }\n    }\n}"]}
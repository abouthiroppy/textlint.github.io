// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = textlintRousseau;

var _textlintRuleHelper = require("textlint-rule-helper");

var _textlintUtilToString = require("textlint-util-to-string");

var _textlintUtilToString2 = _interopRequireDefault(_textlintUtilToString);

var _rousseau = require("rousseau");

var _rousseau2 = _interopRequireDefault(_rousseau);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
    // "suggestion", "warning", "error"
    showLevels: ["suggestion", "warning", "error"],
    ignoreTypes: [],
    fakeInlineCode: true
};
function textlintRousseau(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? defaultOptions : arguments[1];

    var helper = new _textlintRuleHelper.RuleHelper(context);
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;

    var showLevels = options.showLevels || defaultOptions.showLevels;
    var ignoreTypes = options.ignoreTypes || defaultOptions.ignoreTypes;
    var fakeInlineCode = options.fakeInlineCode || defaultOptions.fakeInlineCode;
    var isShowType = function isShowType(type) {
        return ignoreTypes.indexOf(type) === -1;
    };
    var isShowLevel = function isShowLevel(level) {
        return showLevels.indexOf(level) !== -1;
    };
    /*
    {
        // Type of check that output this suggestion
        type: "so",
         // Level of importance
        // "suggestion", "warning", "error"
        level: "warning",
         // Index in the text
        index: 10,
         // Size of the section in the text
        offset: 2,
         // Message to describe the suggestion
        message: "omit 'So' from the beginning of sentences",
         // Replacements suggestion
        replacements: [
            {
                value: ""
            }
        ]
    }
     */
    var createSuggest = function createSuggest(replacements) {
        if (replacements.length === 0) {
            return "";
        }
        return "\nSuggestions:\n" + replacements.map(function (_ref) {
            var value = _ref.value;

            return "=> " + value;
        }).join("\n");
    };
    var reportError = function reportError(node, source, result) {
        var level = result.level;
        var type = result.type;
        // if not contains showing options, ignore this result
        if (!isShowLevel(level)) {
            return;
        }
        if (!isShowType(type)) {
            return;
        }
        var paddingPosition = source.originalPositionFromIndex(result.index);
        var suggestions = createSuggest(result.replacements);
        var ruleError = new RuleError(level + "(" + type + ") " + result.message + suggestions, {
            line: paddingPosition.line - 1,
            column: paddingPosition.column
        });
        report(node, ruleError);
    };
    return _defineProperty({}, Syntax.Paragraph, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        // fake `code`
        if (fakeInlineCode) {
            node.children = node.children.map(function (childNode) {
                if (childNode.type === Syntax.Code) {
                    return {
                        type: Syntax.Str,
                        value: "code",
                        raw: "code",
                        loc: childNode.loc,
                        range: childNode.range
                    };
                }
                return childNode;
            });
        }
        var source = new _textlintUtilToString2.default(node);
        var text = source.toString();
        var reportSourceError = reportError.bind(null, node, source);
        (0, _rousseau2.default)(text, function (err, results) {
            if (err) {
                throw err;
            }
            results.forEach(reportSourceError);
        });
    });
}
module.exports = exports['default'];
//# sourceMappingURL=textlint-rule-rousseau.js.map
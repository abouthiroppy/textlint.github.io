{"version":3,"sources":["../src/textlint-rule-rousseau.js"],"names":[],"mappings":"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","file":"textlint-rule-rousseau.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\"\nimport StringSource from \"textlint-util-to-string\";\nimport rousseau from \"rousseau\";\nconst defaultOptions = {\n    // \"suggestion\", \"warning\", \"error\"\n    showLevels: [\"suggestion\", \"warning\", \"error\"],\n    ignoreTypes: [],\n    fakeInlineCode: true\n};\nexport default function textlintRousseau(context, options = defaultOptions) {\n    const helper = new RuleHelper(context);\n    const {Syntax, RuleError, report, getSource} = context;\n    const showLevels = options.showLevels || defaultOptions.showLevels;\n    const ignoreTypes = options.ignoreTypes || defaultOptions.ignoreTypes;\n    const fakeInlineCode = options.fakeInlineCode || defaultOptions.fakeInlineCode;\n    const isShowType = (type)=> {\n        return ignoreTypes.indexOf(type) === -1;\n    };\n    const isShowLevel = (level) => {\n        return showLevels.indexOf(level) !== -1;\n    };\n    /*\n    {\n        // Type of check that output this suggestion\n        type: \"so\",\n\n        // Level of importance\n        // \"suggestion\", \"warning\", \"error\"\n        level: \"warning\",\n\n        // Index in the text\n        index: 10,\n\n        // Size of the section in the text\n        offset: 2,\n\n        // Message to describe the suggestion\n        message: \"omit 'So' from the beginning of sentences\",\n\n        // Replacements suggestion\n        replacements: [\n            {\n                value: \"\"\n            }\n        ]\n    }\n     */\n    const createSuggest = (replacements) => {\n        if (replacements.length === 0) {\n            return \"\";\n        }\n        return \"\\nSuggestions:\\n\"\n            + replacements.map(({value}) => {\n                return \"=> \" + value;\n            }).join(\"\\n\");\n    };\n    const reportError = (node, source, result) => {\n        const level = result.level;\n        const type = result.type;\n        // if not contains showing options, ignore this result\n        if (!isShowLevel(level)) {\n            return;\n        }\n        if (!isShowType(type)) {\n            return;\n        }\n        const paddingPosition = source.originalPositionFromIndex(result.index);\n        const suggestions = createSuggest(result.replacements);\n        const ruleError = new RuleError(`${level}(${type}) ${result.message}${suggestions}`, {\n            line: paddingPosition.line - 1,\n            column: paddingPosition.column\n        });\n        report(node, ruleError);\n    };\n    return {\n        [Syntax.Paragraph](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            // fake `code`\n            if (fakeInlineCode) {\n                node.children = node.children.map(childNode => {\n                    if (childNode.type === Syntax.Code) {\n                        return {\n                            type: Syntax.Str,\n                            value: \"code\",\n                            raw: \"code\",\n                            loc: childNode.loc,\n                            range: childNode.range\n                        }\n                    }\n                    return childNode;\n                });\n            }\n            const source = new StringSource(node);\n            const text = source.toString();\n            const reportSourceError = reportError.bind(null, node, source);\n            rousseau(text, function (err, results) {\n                if (err) {\n                    throw err;\n                }\n                results.forEach(reportSourceError);\n            });\n        }\n    }\n}"]}
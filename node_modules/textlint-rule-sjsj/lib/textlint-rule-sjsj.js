// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var distance = options.distance || defaultOptions.distance;
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;

    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        var words = text.split(" ").map(function (word) {
            var match = word.match(/(\w+)/);
            return match && match[1];
        }).filter(function (word) {
            return word && word.length > 0;
        });
        words.forEach(function (word) {
            var foundMatchWord = JARGONS.some(function (jargon) {
                var jargonWord = jargon.word;
                // non-case sensitive
                // if match word then skip checking with other jargon
                return word.toLowerCase() === jargonWord.toLowerCase();
            });
            if (foundMatchWord) {
                return;
            }
            JARGONS.forEach(function (jargon) {
                var jargonWord = jargon.word;
                var len = distanceWords(word, jargonWord);
                if (len !== 0 && len <= distance) {
                    report(node, new RuleError(word + " => " + jargonWord + "\nSee " + jargon.url + " for details on."));
                    return true;
                }
            });
        });
    });
};

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var distanceWords = function distanceWords(a, b) {
    var matrix = new Array(a.length + 1);
    for (var i = 0; i < a.length + 1; i++) {
        matrix[i] = new Array(b.length + 1);
    }

    for (var i = 0; i < a.length + 1; i++) {
        matrix[i][0] = i;
    }

    for (var j = 0; j < b.length + 1; j++) {
        matrix[0][j] = j;
    }

    for (var i = 1; i < a.length + 1; i++) {
        for (var j = 1; j < b.length + 1; j++) {
            var x = a[i - 1] == b[j - 1] ? 0 : 1;
            matrix[i][j] = Math.min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j - 1] + x);
        }
    }
    return matrix[a.length][b.length];
};
var JARGONS = require("../dict/jargons.json");
var defaultOptions = {
    distance: 1
};
module.exports = exports['default'];
//# sourceMappingURL=textlint-rule-sjsj.js.map
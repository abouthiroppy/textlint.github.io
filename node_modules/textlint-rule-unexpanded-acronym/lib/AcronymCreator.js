// LICENSE : MIT
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _wordUtils = require("./word-utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Build acronym from words.
 *
 * Word Word Word => WWW
 */

var AcronymCreator = (function () {
    function AcronymCreator() {
        _classCallCheck(this, AcronymCreator);

        this._wordQueue = [];
    }

    _createClass(AcronymCreator, [{
        key: "addWord",
        value: function addWord(word) {
            this._wordQueue.push(word);
        }
    }, {
        key: "canExtractAcronym",
        value: function canExtractAcronym() {
            return this._wordQueue.length > 0;
        }
    }, {
        key: "extractAcronym",
        value: function extractAcronym() {
            var acronym = (0, _wordUtils.expandWordsToAcronym)(this._wordQueue);
            this.clear();
            return acronym;
        }
    }, {
        key: "clear",
        value: function clear() {
            this._wordQueue = [];
        }
    }]);

    return AcronymCreator;
})();

exports.default = AcronymCreator;
module.exports = exports['default'];
//# sourceMappingURL=AcronymCreator.js.map
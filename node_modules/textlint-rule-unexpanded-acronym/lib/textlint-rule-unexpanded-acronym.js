// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (context) {
    var _ref;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var minAcronymLength = options.min_acronym_len || defaultOptions.min_acronym_len;
    var maxAcronymLength = options.max_acronym_len || defaultOptions.max_acronym_len;
    var ignoreAcronymList = options.ignore_acronyms || defaultOptions.ignore_acronyms;
    var acronymJoiningWords = options.acronymJoiningWords || defaultOptions.acronymJoiningWords;
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;
    // pickup acronyms

    var acronymList = [];
    // original words in document
    var expandedAcronymList = [];
    var isWordSatisfy = function isWordSatisfy(word) {
        if (word.length < minAcronymLength) {
            return false;
        } else if (word.length > maxAcronymLength) {
            return false;
        }
        return true;
    };
    return _ref = {}, _defineProperty(_ref, Syntax.Str, function (node) {
        var text = getSource(node);
        var words = text.split(/\b/);
        var acronymCreator = new _AcronymCreator2.default();
        words.forEach(function (word) {
            if (word.trim().length === 0) {
                return;
            }
            if ((0, _wordUtils.isAllCapitals)(word)) {
                // collect Acronym
                var isOk = isWordSatisfy(word) && !includes(ignoreAcronymList, word);
                if (isOk && !includes(acronymList, word)) {
                    acronymList.push(word);
                }
            } else if (isCapitalized(word)) {
                // Add temporarySequence
                // => add temp [Aword, Bword, Cword] = ABC
                acronymCreator.addWord(word);
            } else if (!includes(acronymJoiningWords, word) // ignore of and...
             && acronymCreator.canExtractAcronym()) {
                // Create Acronym
                var acronym = acronymCreator.extractAcronym();
                if (isWordSatisfy(acronym)) {
                    expandedAcronymList.push(acronym);
                }
            }
        });
        if (acronymCreator.canExtractAcronym()) {
            // Create Acronym
            var acronym = acronymCreator.extractAcronym();
            if (isWordSatisfy(acronym)) {
                expandedAcronymList.push(acronym);
            }
        }
    }), _defineProperty(_ref, Syntax.Document + ":exit", function (node) {
        acronymList.forEach(function (acronym) {
            // not found acronym in document
            if (!includes(expandedAcronymList, acronym)) {
                report(node, new RuleError('"' + acronym + '" is unexpanded acronym. What does "' + acronym + '" stands for?'));
            }
        });
    }), _ref;
};

var _AcronymCreator = require('./AcronymCreator');

var _AcronymCreator2 = _interopRequireDefault(_AcronymCreator);

var _wordUtils = require('./word-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isCapitalized = require('is-capitalized');
var includes = require('array-includes');

var defaultOptions = {
    min_acronym_len: 3,
    max_acronym_len: 5,
    ignore_acronyms: [],
    acronymJoiningWords: ["of", "the", "for", "in", "and", "or", "&"]
};

/*
Step

1. Collect Acronym => `acronymList`
2. Collect original words of Acronym => `expandedAcronymList`
3. expandedAcronymList.includes(acronymList)
    - Not found Acronym and throw error
 */
module.exports = exports['default'];
//# sourceMappingURL=textlint-rule-unexpanded-acronym.js.map
{"version":3,"sources":["../src/textlint-rule-unexpanded-acronym.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;kBA4BE,UAAU,OAAO,EAAgB;;;QAAd,OAAO,yDAAG,EAAE;;AAC1C,QAAM,gBAAgB,GAAG,OAAO,CAAC,eAAe,IAAI,cAAc,CAAC,eAAe,CAAC;AACnF,QAAM,gBAAgB,GAAG,OAAO,CAAC,eAAe,IAAI,cAAc,CAAC,eAAe,CAAC;AACnF,QAAM,iBAAiB,GAAG,OAAO,CAAC,eAAe,IAAI,cAAc,CAAC,eAAe,CAAC;AACpF,QAAM,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,IAAI,cAAc,CAAC,mBAAmB,CAAC;QACvF,MAAM,GAAkC,OAAO,CAA/C,MAAM;QAAE,SAAS,GAAuB,OAAO,CAAvC,SAAS;QAAE,MAAM,GAAe,OAAO,CAA5B,MAAM;QAAE,SAAS,GAAI,OAAO,CAApB,SAAS;;;AAE3C,QAAM,WAAW,GAAG,EAAE;;AAAC,AAEvB,QAAM,mBAAmB,GAAG,EAAE,CAAC;AAC/B,QAAM,aAAa,GAAG,SAAhB,aAAa,CAAI,IAAI,EAAK;AAC5B,YAAI,IAAI,CAAC,MAAM,GAAG,gBAAgB,EAAE;AAChC,mBAAO,KAAK,CAAC;SAChB,MAAM,IAAI,IAAI,CAAC,MAAM,GAAG,gBAAgB,EAAE;AACvC,mBAAO,KAAK,CAAC;SAChB;AACD,eAAO,IAAI,CAAC;KACf,CAAC;AACF,4CACK,MAAM,CAAC,GAAG,YAAE,IAAI,EAAC;AACd,YAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AAC7B,YAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/B,YAAM,cAAc,GAAG,8BAAoB,CAAC;AAC5C,aAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AAClB,gBAAI,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;AAC1B,uBAAM;aACT;AACD,gBAAI,eAnDZ,aAAa,EAmDa,IAAI,CAAC,EAAE;;AAErB,oBAAI,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;AACrE,oBAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,EAAE;AACtC,+BAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC1B;aACJ,MAAM,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;;;AAG5B,8BAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAChC,MAAM,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,IAAI,CAAC;AAAA,gBACxC,cAAc,CAAC,iBAAiB,EAAE,EAAE;;AAEvC,oBAAI,OAAO,GAAG,cAAc,CAAC,cAAc,EAAE,CAAC;AAC9C,oBAAI,aAAa,CAAC,OAAO,CAAC,EAAE;AACxB,uCAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACrC;aACJ;SACJ,CAAC,CAAC;AACH,YAAI,cAAc,CAAC,iBAAiB,EAAE,EAAE;;AAEpC,gBAAI,OAAO,GAAG,cAAc,CAAC,cAAc,EAAE,CAAC;AAC9C,gBAAI,aAAa,CAAC,OAAO,CAAC,EAAE;AACxB,mCAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACrC;SACJ;KACJ,yBACA,MAAM,CAAC,QAAQ,GAAG,OAAO,YAAE,IAAI,EAAC;AAC7B,mBAAW,CAAC,OAAO,CAAC,UAAA,OAAO,EAAI;;AAE3B,gBAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,OAAO,CAAC,EAAE;AACzC,sBAAM,CAAC,IAAI,EAAE,IAAI,SAAS,OAAK,OAAO,4CAAuC,OAAO,mBAAgB,CAAC,CAAC;aACzG;SACJ,CAAC,CAAC;KACN,QACJ;CACJ;;;;;;;;;;;;AA1FD,IAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAChD,IAAM,QAAQ,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAG3C,IAAM,cAAc,GAAG;AACnB,mBAAe,EAAE,CAAC;AAClB,mBAAe,EAAE,CAAC;AAClB,mBAAe,EAAE,EAAE;AACnB,uBAAmB,EAAE,CACjB,IAAI,EACJ,KAAK,EACL,KAAK,EACL,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,GAAG,CACN;CACJ;;;;;;;;;;AAAC","file":"textlint-rule-unexpanded-acronym.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst isCapitalized = require('is-capitalized');\nconst includes = require('array-includes');\nimport AcronymCreator from \"./AcronymCreator\";\nimport {isAllCapitals, expandWordsToAcronym} from \"./word-utils\";\nconst defaultOptions = {\n    min_acronym_len: 3,\n    max_acronym_len: 5,\n    ignore_acronyms: [],\n    acronymJoiningWords: [\n        \"of\",\n        \"the\",\n        \"for\",\n        \"in\",\n        \"and\",\n        \"or\",\n        \"&\"\n    ]\n};\n\n/*\nStep\n\n1. Collect Acronym => `acronymList`\n2. Collect original words of Acronym => `expandedAcronymList`\n3. expandedAcronymList.includes(acronymList)\n    - Not found Acronym and throw error\n */\nexport default function (context, options = {}) {\n    const minAcronymLength = options.min_acronym_len || defaultOptions.min_acronym_len;\n    const maxAcronymLength = options.max_acronym_len || defaultOptions.max_acronym_len;\n    const ignoreAcronymList = options.ignore_acronyms || defaultOptions.ignore_acronyms;\n    const acronymJoiningWords = options.acronymJoiningWords || defaultOptions.acronymJoiningWords;\n    const {Syntax, RuleError, report, getSource} = context;\n    // pickup acronyms\n    const acronymList = [];\n    // original words in document\n    const expandedAcronymList = [];\n    const isWordSatisfy = (word) => {\n        if (word.length < minAcronymLength) {\n            return false;\n        } else if (word.length > maxAcronymLength) {\n            return false;\n        }\n        return true;\n    };\n    return {\n        [Syntax.Str](node){\n            const text = getSource(node);\n            const words = text.split(/\\b/);\n            const acronymCreator = new AcronymCreator();\n            words.forEach(word => {\n                if (word.trim().length === 0) {\n                    return\n                }\n                if (isAllCapitals(word)) {\n                    // collect Acronym\n                    var isOk = isWordSatisfy(word) && !includes(ignoreAcronymList, word);\n                    if (isOk && !includes(acronymList, word)) {\n                        acronymList.push(word);\n                    }\n                } else if (isCapitalized(word)) {\n                    // Add temporarySequence\n                    // => add temp [Aword, Bword, Cword] = ABC\n                    acronymCreator.addWord(word);\n                } else if (!includes(acronymJoiningWords, word) // ignore of and...\n                    && acronymCreator.canExtractAcronym()) {\n                    // Create Acronym\n                    var acronym = acronymCreator.extractAcronym();\n                    if (isWordSatisfy(acronym)) {\n                        expandedAcronymList.push(acronym);\n                    }\n                }\n            });\n            if (acronymCreator.canExtractAcronym()) {\n                // Create Acronym\n                var acronym = acronymCreator.extractAcronym();\n                if (isWordSatisfy(acronym)) {\n                    expandedAcronymList.push(acronym);\n                }\n            }\n        },\n        [Syntax.Document + \":exit\"](node){\n            acronymList.forEach(acronym => {\n                // not found acronym in document\n                if (!includes(expandedAcronymList, acronym)) {\n                    report(node, new RuleError(`\"${acronym}\" is unexpanded acronym. What does \"${acronym}\" stands for?`));\n                }\n            });\n        }\n    }\n}"]}
{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["// LICENSE : MIT\n'use strict';\nconst Promise = require(\"bluebird\");\nconst fs = require('fs');\nconst path = require('path');\nconst debug = require('debug')('textlint:cli');\nconst mkdirp = require('mkdirp');\nconst options = require('./options');\nconst TextLintEngine = require('./textlint-engine');\nconst Config = require('./config/config');\n/*\n    cli.js is command line **interface**\n\n    processing role is cli-engine.js.\n    @see cli-engine.js\n */\n/**\n * Print results of lining text.\n * @param {string} output the output text which is formatted by {@link TextLintEngine.formatResults}\n * @param {object} options cli option object {@lint ./options.js}\n * @returns {boolean} does print result success?\n */\nfunction printResults(output, options) {\n    if (!output) {\n        return true;\n    }\n    const outputFile = options.outputFile;\n    if (outputFile) {\n        const filePath = path.resolve(process.cwd(), outputFile);\n        if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {\n            console.error('Cannot write to output file path, it is a directory: %s', outputFile);\n            return false;\n        }\n        try {\n            mkdirp.sync(path.dirname(filePath));\n            fs.writeFileSync(filePath, output);\n        } catch (ex) {\n            console.error('There was a problem writing the output file:\\n%s', ex);\n            return false;\n        }\n    } else {\n        console.log(output);\n    }\n    return true;\n}\n// Public Interface\n/**\n * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as\n * for other Node.js programs to effectively run the CLI.\n */\nconst cli = {\n    /**\n     * Executes the CLI based on an array of arguments that is passed in.\n     * @param {string|Array|Object} args The arguments to process.\n     * @param {string} [text] The text to lint (used for TTY).\n     * @returns {int} The exit code for the operation.\n     */\n    execute(args, text) {\n        var currentOptions;\n        try {\n            currentOptions = options.parse(args);\n        } catch (error) {\n            console.error(error.message);\n            return Promise.resolve(1);\n        }\n        const files = currentOptions._;\n        if (currentOptions.version) {\n            // version from package.json\n            console.log(`v${ require('../package.json').version }`);\n        } else if (currentOptions.help || !files.length && !text) {\n            console.log(options.generateHelp());\n        } else {\n            debug(`Running on ${ text ? 'text' : 'files' }`);\n            return this.executeWithOptions(currentOptions, files, text);\n        }\n        return Promise.resolve(0);\n    },\n    /**\n     * execute with cli options\n     * @param {object} cliOptions\n     * @param {string[]} files files are file path list\n     * @param {string} text?\n     * @returns {number} exit status\n     */\n    executeWithOptions(cliOptions, files, text){\n        const config = Config.initWithCLIOptions(cliOptions);\n        const engine = new TextLintEngine(config);\n        const resultsPromise = text ? engine.executeOnText(text) : engine.executeOnFiles(files);\n        return resultsPromise.then(results => {\n            const output = engine.formatResults(results);\n            if (printResults(output, cliOptions)) {\n                return engine.isErrorResults(results) ? 1 : 0;\n            } else {\n                return 1;\n            }\n        });\n    }\n};\nmodule.exports = cli;\n"]}
{"version":3,"sources":["../../src/fixer/rule-fixer-commaner.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAmB,QAAQ;;;;;;;;;;;;;;;;;AAe3B,SAAS,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE;AAC/B,6BAAO,IAAI,EAAE,qBAAqB,CAAC,CAAC;AACpC,WAAO;AACH,aAAK,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;AACrB,YAAI,EAAJ,IAAI;KACP,CAAC;CACL;;;;;;;IAMoB,SAAS;aAAT,SAAS;8BAAT,SAAS;;;iBAAT,SAAS;;;;;;;;;;eAQX,yBAAC,IAAI,EAAE,IAAI,EAAE;AACxB,mBAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACtD;;;;;;;;;;;;eAUmB,8BAAC,KAAK,EAAE,IAAI,EAAE;AAC9B,mBAAO,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SACvC;;;;;;;;;;;eASe,0BAAC,IAAI,EAAE,IAAI,EAAE;AACzB,mBAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACvD;;;;;;;;;;;;eAUoB,+BAAC,KAAK,EAAE,IAAI,EAAE;AAC/B,mBAAO,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SACvC;;;;;;;;;;;eASU,qBAAC,IAAI,EAAE,IAAI,EAAE;AACpB,mBAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAClD;;;;;;;;;;;;eAUe,0BAAC,KAAK,EAAE,IAAI,EAAE;AAC1B,mBAAO;AACH,qBAAK,EAAL,KAAK;AACL,oBAAI,EAAJ,IAAI;aACP,CAAC;SACL;;;;;;;;;;eAQK,gBAAC,IAAI,EAAE;AACT,mBAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACvC;;;;;;;;;;;eASU,qBAAC,KAAK,EAAE;AACf,mBAAO;AACH,qBAAK,EAAL,KAAK;AACL,oBAAI,EAAE,EAAE;aACX,CAAC;SACL;;;WA/FgB,SAAS;;;qBAAT,SAAS","file":"rule-fixer-commaner.js","sourcesContent":["import assert from \"assert\";\n\n/**\n * Fix Command object has `range` and `text`.\n * @typedef {Object} FixCommand\n * @property {number[]} range range is an array of numbers : [start, end]\n * @property {string} text text is replace value.\n */\n/**\n * Creates a fix command that inserts text at the specified index in the source text.\n * @param {int} index The 0-based index at which to insert the new text.\n * @param {string} text The text to insert.\n * @returns {FixCommand} The fix command.\n * @private\n */\nfunction insertTextAt(index, text) {\n    assert(text, \"text must be string\");\n    return {\n        range: [index, index],\n        text\n    };\n}\n/**\n * Creates code fixing commands for rules.\n * It create command for fixing texts.\n * @constructor\n */\nexport default class RuleFixer {\n    /**\n     * Creates a fix command that inserts text after the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtSyntax.TxtNode} node The node or token to insert after.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextAfter(node, text) {\n        return this.insertTextAfterRange(node.range, text);\n    }\n\n    /**\n     * Creates a fix command that inserts text after the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextAfterRange(range, text) {\n        return insertTextAt(range[1], text);\n    }\n\n    /**\n     * Creates a fix command that inserts text before the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtSyntax.TxtNode} node The node or token to insert before.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextBefore(node, text) {\n        return this.insertTextBeforeRange(node.range, text);\n    }\n\n    /**\n     * Creates a fix command that inserts text before the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextBeforeRange(range, text) {\n        return insertTextAt(range[0], text);\n    }\n\n    /**\n     * Creates a fix command that replaces text at the node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtSyntax.TxtNode} node The node or token to remove.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    replaceText(node, text) {\n        return this.replaceTextRange(node.range, text);\n    }\n\n    /**\n     * Creates a fix command that replaces text at the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    replaceTextRange(range, text) {\n        return {\n            range,\n            text\n        };\n    }\n\n    /**\n     * Creates a fix command that removes the node or token from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtSyntax.TxtNode} node The node or token to remove.\n     * @returns {FixCommand} The fix command.\n     */\n    remove(node) {\n        return this.removeRange(node.range);\n    }\n\n    /**\n     * Creates a fix command that removes the specified range of text from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to remove, first item is start of range, second\n     *      is end of range.\n     * @returns {FixCommand} The fix command.\n     */\n    removeRange(range) {\n        return {\n            range,\n            text: \"\"\n        };\n    }\n}"]}
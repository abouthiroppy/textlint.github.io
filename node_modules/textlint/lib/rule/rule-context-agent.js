"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require("carrack");
var UnionSyntax = require("../parser/union-syntax");
var debug = require('debug')('textlint:rule-context-agent');
var RuleError = require("./rule-error");
var computeLocation = require("./compute-location");
/**
 * The Agent communicate between RuleContext and Rules.
 */

var RuleContextAgent = (function (_EventEmitter) {
    _inherits(RuleContextAgent, _EventEmitter);

    function RuleContextAgent(text, filePath) {
        if (text === undefined) text = "";

        _classCallCheck(this, RuleContextAgent);

        _get(Object.getPrototypeOf(RuleContextAgent.prototype), "constructor", this).call(this);
        // set unlimited listeners (see https://github.com/textlint/textlint/issues/33)
        this.setMaxListeners(0);
        this.messages = [];
        this.currentText = text;
        this.currentFilePath = filePath;
    }

    /**
     * push new RuleError to results
     * @param {string} ruleId
     * @param {TxtNode} node
     * @param {number} severity
     * @param {RuleError|any} error error is a RuleError instance or any data
     */

    _createClass(RuleContextAgent, [{
        key: "pushReport",
        value: function pushReport(_ref) {
            var ruleId = _ref.ruleId;
            var node = _ref.node;
            var severity = _ref.severity;
            var error = _ref.error;

            debug('pushReport %s', error);

            var _computeLocation = computeLocation(node, error);

            var line = _computeLocation.line;
            var column = _computeLocation.column;

            // add TextLintMessage
            var message = {
                ruleId: ruleId,
                message: error.message,
                // See https://github.com/textlint/textlint/blob/master/typing/textlint.d.ts
                line: line, // start with 1(1-based line number)
                column: column + 1, // start with 1(1-based column number)
                severity: severity // it's for compatible ESLint formatter
            };
            if (!(error instanceof RuleError)) {
                // `error` is a any data.
                var data = error;
                message.data = data;
            }
            this.messages.push(message);
        }

        // TODO: allow to use Syntax which is defined by Plugin Processor.
    }, {
        key: "getSyntax",
        value: function getSyntax() {
            return UnionSyntax;
        }
    }, {
        key: "getFilePath",
        value: function getFilePath() {
            return this.currentFilePath;
        }

        /**
         * Gets the source code for the given node.
         * @param {TxtNode=} node The AST node to get the text for.
         * @param {int=} beforeCount The number of characters before the node to retrieve.
         * @param {int=} afterCount The number of characters after the node to retrieve.
         * @returns {string|null} The text representing the AST node.
         */
    }, {
        key: "getSource",
        value: function getSource(node, beforeCount, afterCount) {
            var currentText = this.currentText;
            if (currentText == null) {
                return null;
            }
            if (node) {
                var start = Math.max(node.range[0] - (beforeCount || 0), 0);
                var end = node.range[1] + (afterCount || 0);
                return currentText.slice(start, end);
            } else {
                return currentText;
            }
        }
    }]);

    return RuleContextAgent;
})(EventEmitter);

exports["default"] = RuleContextAgent;
module.exports = exports["default"];
//# sourceMappingURL=rule-context-agent.js.map
// LICENSE : MIT
'use strict';
var RuleError = require('./rule-error');
var assert = require('assert');
var SeverityLevel = {
    "none": 0,
    "info": 0,
    "warning": 1,
    "error": 2
};
/**
 *
 * @param ruleConfig
 * @returns {number}
 */
function getSeverity(ruleConfig) {
    if (ruleConfig == null) {
        return SeverityLevel.error;
    }
    // rule:<true|false>
    if (typeof ruleConfig === "boolean") {
        return ruleConfig ? SeverityLevel.error : SeverityLevel.none;
    }
    if (ruleConfig.severity) {
        assert(SeverityLevel[ruleConfig.severity] !== undefined, 'please set\n"rule-key": {\n    "severity": "<warning|error>"\n}');
        return SeverityLevel[ruleConfig.severity];
    }
    return SeverityLevel.error;
}

function RuleContext(ruleId, agent, textLintConfig, ruleConfig) {
    Object.defineProperty(this, 'id', { value: ruleId });
    Object.defineProperty(this, 'config', { value: textLintConfig });
    var severity = getSeverity(ruleConfig);
    /**
     *
     * @param {TxtNode} node
     * @param {RuleError|any} error error is a RuleError instance or any data
     */
    this.report = function (node, error) {
        if (error instanceof RuleError) {
            agent.pushReport({ ruleId: ruleId, node: node, severity: severity, error: error });
        } else {
            var level = error.severity || SeverityLevel.info;
            agent.pushReport({ ruleId: ruleId, node: node, severity: level, error: error });
        }
    };
    // Const Values
    Object.defineProperty(this, 'Syntax', {
        get: function get() {
            return agent.getSyntax();
        }
    });
    this.getFilePath = agent.getFilePath.bind(agent);
    this.getSource = agent.getSource.bind(agent);
    // CustomError object
    this.RuleError = RuleError;
}
module.exports = RuleContext;
//# sourceMappingURL=rule-context.js.map
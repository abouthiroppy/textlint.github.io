{"version":3,"sources":["../../src/rule/rule-manager.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;AACb,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC5C,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;;IAEzB,WAAW;AACjB,aADM,WAAW,GACd;8BADG,WAAW;;;;;;;;;AASxB,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;KACnB;;iBAVgB,WAAW;;eAYb,2BAAG;AACd,mBAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClC;;;eAEM,iBAAC,OAAO,EAAE;AACb,mBAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC9B;;;;;;;eAKU,uBAAG;AACV,mBAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;eAEY,uBAAC,OAAO,EAAE;AACnB,mBAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;SACxC;;;;;;;;;eAOQ,mBAAC,OAAO,EAAE;AACf,wBAAY,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;AAC/C,mBAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;;;;;;;;eAQW,sBAAC,WAAW,EAAE,UAAU,EAAE;;;AAClC,kBAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM,EAAI;AACvC,oBAAI,eAAe,GAAG,UAAU,GAAG,GAAG,GAAG,MAAM,CAAC;AAChD,oBAAI,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;AACtC,sBAAK,UAAU,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;aACjD,CAAC,CAAC;SACN;;;;;;;;;eAOS,oBAAC,OAAO,EAAE,WAAW,EAAE;AAC7B,gBAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC;SACrC;;;eAES,sBAAG;AACT,gBAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACpC;;;WAlEgB,WAAW;;;qBAAX,WAAW","file":"rule-manager.js","sourcesContent":["// LICENSE : MIT\n'use strict';\nconst loadRuleDir = require('./load-rules');\nconst objectAssign = require('object-assign');\n// dictionary dictionary\nexport default class RuleManager {\n    constructor() {\n        /**\n         * @typedef {{key: Function}} RulesObject\n         */\n        /**\n         * Defined all rules in this object.\n         * @type {RulesObject}\n         */\n        this.rules = [];\n    }\n\n    getAllRuleNames() {\n        return Object.keys(this.rules);\n    }\n\n    getRule(ruleKey) {\n        return this.rules[ruleKey];\n    }\n\n    /**\n     * @returns {RulesObject}\n     */\n    getAllRules() {\n        return this.rules;\n    }\n\n    isDefinedRule(ruleKey) {\n        return this.getRule(ruleKey) != null;\n    }\n\n    /**\n     *\n     * @param {string} ruleDir ruleDir is rule directory.\n     * @returns {RulesObject}\n     */\n    loadRules(ruleDir) {\n        objectAssign(this.rules, loadRuleDir(ruleDir));\n        return this.rules;\n    }\n\n    /**\n     * Registers all given rules of a plugin.\n     * @param {Object} pluginRules A key/value map of rule definitions.\n     * @param {String} pluginName The name of the plugin without prefix (`textlint-plugin-`).\n     * @returns {void}\n     */\n    importPlugin(pluginRules, pluginName) {\n        Object.keys(pluginRules).forEach(ruleId => {\n            let qualifiedRuleId = pluginName + \"/\" + ruleId;\n            let ruleCreator = pluginRules[ruleId];\n            this.defineRule(qualifiedRuleId, ruleCreator);\n        });\n    }\n\n    /**\n     *\n     * @param {string} ruleKey\n     * @param ruleHandler\n     */\n    defineRule(ruleKey, ruleHandler) {\n        this.rules[ruleKey] = ruleHandler;\n    }\n\n    resetRules() {\n        this.rules = Object.create(null);\n    }\n}\n"]}
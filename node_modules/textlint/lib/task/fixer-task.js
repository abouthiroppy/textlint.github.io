// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _textlintCoreTask = require("./textlint-core-task");

var _textlintCoreTask2 = _interopRequireDefault(_textlintCoreTask);

var _ruleRuleContext = require("./../rule/rule-context");

var _ruleRuleContext2 = _interopRequireDefault(_ruleRuleContext);

var _utilTiming = require("./../util/timing");

var _utilTiming2 = _interopRequireDefault(_utilTiming);

var _ruleRuleCreatorHelper = require("../rule/rule-creator-helper");

var TextLintCoreTask = (function (_CoreTask) {
    _inherits(TextLintCoreTask, _CoreTask);

    function TextLintCoreTask() {
        _classCallCheck(this, TextLintCoreTask);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        _get(Object.getPrototypeOf(TextLintCoreTask.prototype), "constructor", this).apply(this, args);
        this._setupRuleCreatorListener();
    }

    /**
     * setup ruleTypeEmitter
     * @private
     */

    _createClass(TextLintCoreTask, [{
        key: "_setupRuleCreatorListener",
        value: function _setupRuleCreatorListener() {
            var _this = this;

            var rules = this.rules;
            var config = this.config;
            var rulesConfig = this.rulesConfig;
            var textLintConfig = config;
            var sourceCode = this.sourceCode;
            var report = this.report.bind(this);
            Object.keys(rules).forEach(function (key) {
                var ruleCreator = rules[key];
                var ruleConfig = rulesConfig[key];
                try {
                    var ruleContext = new _ruleRuleContext2["default"](key, sourceCode, report, textLintConfig, ruleConfig);
                    var ruleObject = (0, _ruleRuleCreatorHelper.getFixer)(ruleCreator)(ruleContext, ruleConfig);
                    _this._addListenRule(key, ruleObject);
                } catch (ex) {
                    ex.message = "Error while loading rule '" + key + "': " + ex.message;
                    throw ex;
                }
            });
        }

        // add all the node types as listeners
    }, {
        key: "_addListenRule",
        value: function _addListenRule(key, rule) {
            var _this2 = this;

            Object.keys(rule).forEach(function (nodeType) {
                _this2.ruleTypeEmitter.on(nodeType, _utilTiming2["default"].enabled ? _utilTiming2["default"].time(key, rule[nodeType]) : rule[nodeType]);
            });
        }
    }]);

    return TextLintCoreTask;
})(_textlintCoreTask2["default"]);

exports["default"] = TextLintCoreTask;
module.exports = exports["default"];
//# sourceMappingURL=fixer-task.js.map
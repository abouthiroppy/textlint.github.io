{"version":3,"sources":["../../src/task/linter-task.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;;;;;;;gCACQ,sBAAsB;;;;+BACnB,wBAAwB;;;;0BAC7B,kBAAkB;;;;qCACb,6BAA6B;;IAChC,gBAAgB;cAAhB,gBAAgB;;AACtB,aADM,gBAAgB,GACZ;8BADJ,gBAAgB;;0CAClB,IAAI;AAAJ,gBAAI;;;AACf,mCAFa,gBAAgB,8CAEpB,IAAI,EAAE;AACf,YAAI,CAAC,yBAAyB,EAAE,CAAC;KACpC;;;;;;;iBAJgB,gBAAgB;;eAUR,qCAAG;;;AACxB,gBAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACzB,gBAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC3B,gBAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACrC,gBAAM,cAAc,GAAG,MAAM,CAAC;AAC9B,gBAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACnC,gBAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtC,kBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AAC9B,oBAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AAC/B,oBAAM,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;AACpC,oBAAI;AACA,wBAAM,WAAW,GAAG,iCAAgB,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;AACzF,wBAAM,UAAU,GAAG,sCAAU,WAAW,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;AACnE,0BAAK,cAAc,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;iBACxC,CAAC,OAAO,EAAE,EAAE;AACT,sBAAE,CAAC,OAAO,kCAAiC,GAAG,WAAQ,EAAE,CAAC,OAAO,AAAG,CAAC;AACpE,0BAAM,EAAE,CAAC;iBACZ;aACJ,CAAC,CAAC;SACN;;;;;eAGa,wBAAC,GAAG,EAAE,IAAI,EAAE;;;AACtB,kBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAI;AAClC,uBAAK,eAAe,CAAC,EAAE,CAAC,QAAQ,EAAE,wBAAO,OAAO,GAC1C,wBAAO,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAChC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aACzB,CAAC,CAAC;SACN;;;WAtCgB,gBAAgB;;;qBAAhB,gBAAgB","file":"linter-task.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport CoreTask from \"./textlint-core-task\";\nimport RuleContext from \"./../rule/rule-context\";\nimport timing from \"./../util/timing\";\nimport {getLinter} from \"../rule/rule-creator-helper\";\nexport default class TextLintCoreTask extends CoreTask {\n    constructor(...args) {\n        super(...args);\n        this._setupRuleCreatorListener();\n    }\n\n    /**\n     * setup ruleTypeEmitter\n     * @private\n     */\n    _setupRuleCreatorListener() {\n        const rules = this.rules;\n        const config = this.config;\n        const rulesConfig = this.rulesConfig;\n        const textLintConfig = config;\n        const sourceCode = this.sourceCode;\n        const report = this.report.bind(this);\n        Object.keys(rules).forEach(key => {\n            const ruleCreator = rules[key];\n            const ruleConfig = rulesConfig[key];\n            try {\n                const ruleContext = new RuleContext(key, sourceCode, report, textLintConfig, ruleConfig);\n                const ruleObject = getLinter(ruleCreator)(ruleContext, ruleConfig);\n                this._addListenRule(key, ruleObject);\n            } catch (ex) {\n                ex.message = `Error while loading rule '${ key }': ${ ex.message }`;\n                throw ex;\n            }\n        });\n    }\n\n    // add all the node types as listeners\n    _addListenRule(key, rule) {\n        Object.keys(rule).forEach(nodeType => {\n            this.ruleTypeEmitter.on(nodeType, timing.enabled\n                ? timing.time(key, rule[nodeType])\n                : rule[nodeType]);\n        });\n    }\n}"]}
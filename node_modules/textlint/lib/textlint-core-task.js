// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require("events");
var TraverseController = require('txt-ast-traverse').Controller;
var RuleContext = require("./rule/rule-context");
var timing = require("./util/timing");
var RuleError = require("./rule/rule-error");
var PromiseEventEmitter = require("carrack");
var computeLocation = require("./rule/compute-location");
var traverseController = new TraverseController();
var debug = require("debug")("textlint:core-task");

var RuleTypeEmitter = (function (_PromiseEventEmitter) {
    _inherits(RuleTypeEmitter, _PromiseEventEmitter);

    function RuleTypeEmitter() {
        _classCallCheck(this, RuleTypeEmitter);

        _get(Object.getPrototypeOf(RuleTypeEmitter.prototype), "constructor", this).call(this);
        this.setMaxListeners(0);
    }

    return RuleTypeEmitter;
})(PromiseEventEmitter);

var TextLintCoreTask = (function (_EventEmitter) {
    _inherits(TextLintCoreTask, _EventEmitter);

    _createClass(TextLintCoreTask, null, [{
        key: "events",
        get: function get() {
            return {
                // receive start event
                start: "start",
                // receive message from each rules
                message: "message",
                // receive complete event
                complete: "complete"
            };
        }
    }]);

    function TextLintCoreTask(_ref) {
        var _this = this;

        var config = _ref.config;
        var rules = _ref.rules;
        var rulesConfig = _ref.rulesConfig;
        var sourceCode = _ref.sourceCode;

        _classCallCheck(this, TextLintCoreTask);

        _get(Object.getPrototypeOf(TextLintCoreTask.prototype), "constructor", this).call(this);
        this.config = config;
        this.rules = rules;
        this.rulesConfig = rulesConfig;
        this.sourceCode = sourceCode;
        this.ruleTypeEmitter = new RuleTypeEmitter();
        /**
         * push new RuleError to results
         * @param {string} ruleId
         * @param {TxtNode} node
         * @param {number} severity
         * @param {RuleError|any} error error is a RuleError instance or any data
         */
        var report = function report(_ref2) {
            var ruleId = _ref2.ruleId;
            var node = _ref2.node;
            var severity = _ref2.severity;
            var error = _ref2.error;

            debug('pushReport %s', error);

            var _computeLocation = computeLocation(node, error);

            var line = _computeLocation.line;
            var column = _computeLocation.column;

            // add TextLintMessage
            var message = {
                ruleId: ruleId,
                message: error.message,
                // See https://github.com/textlint/textlint/blob/master/typing/textlint.d.ts
                line: line, // start with 1(1-based line number)
                column: column + 1, // start with 1(1-based column number)
                severity: severity // it's for compatible ESLint formatter
            };
            if (!(error instanceof RuleError)) {
                // `error` is a any data.
                var data = error;
                message.data = data;
            }
            _this.emit(TextLintCoreTask.events.message, message);
        };

        this._setupRuleCreatorListener(report);
    }

    _createClass(TextLintCoreTask, [{
        key: "_setupRuleCreatorListener",
        value: function _setupRuleCreatorListener(report) {
            var _this2 = this;

            var rules = this.rules;
            var config = this.config;
            var rulesConfig = this.rulesConfig;
            var textLintConfig = config;
            var sourceCode = this.sourceCode;
            Object.keys(rules).forEach(function (key) {
                var ruleCreator = rules[key];
                var ruleConfig = rulesConfig[key];
                try {
                    var ruleContext = new RuleContext(key, sourceCode, report, textLintConfig, ruleConfig);
                    var rule = ruleCreator(ruleContext, ruleConfig);
                    _this2._addListenRule(key, rule);
                } catch (ex) {
                    ex.message = "Error while loading rule '" + key + "': " + ex.message;
                    throw ex;
                }
            });
        }

        // add all the node types as listeners
    }, {
        key: "_addListenRule",
        value: function _addListenRule(key, rule) {
            var _this3 = this;

            Object.keys(rule).forEach(function (nodeType) {
                _this3.ruleTypeEmitter.on(nodeType, timing.enabled ? timing.time(key, rule[nodeType]) : rule[nodeType]);
            });
        }

        /**
         * Process ast tree.
         * You can listen message by `task.on("message", message => {})`
         * @param {TxtNode} astTree astTree is compatible TxtNode tree.
         */
    }, {
        key: "process",
        value: function process(astTree) {
            var _this4 = this;

            var promiseQueue = [];
            var listenerCount = typeof this.ruleTypeEmitter.listenerCount !== 'undefined' ? this.ruleTypeEmitter.listenerCount.bind(this.ruleTypeEmitter) // Node 4.x >=
            : EventEmitter.listenerCount.bind(EventEmitter, this.ruleTypeEmitter); // Node 0.12

            this.emit(TextLintCoreTask.events.start);

            var ruleTypeEmitter = this.ruleTypeEmitter;
            traverseController.traverse(astTree, {
                enter: function enter(node, parent) {
                    var type = node.type;
                    Object.defineProperty(node, 'parent', { value: parent });
                    if (listenerCount(type) > 0) {
                        var promise = ruleTypeEmitter.emit(type, node);
                        promiseQueue.push(promise);
                    }
                },
                leave: function leave(node) {
                    var type = node.type + ":exit";
                    if (listenerCount(type) > 0) {
                        var promise = ruleTypeEmitter.emit(type, node);
                        promiseQueue.push(promise);
                    }
                }
            });
            Promise.all(promiseQueue).then(function () {
                _this4.emit(TextLintCoreTask.events.complete);
            });
        }
    }]);

    return TextLintCoreTask;
})(EventEmitter);

exports["default"] = TextLintCoreTask;
module.exports = exports["default"];
//# sourceMappingURL=textlint-core-task.js.map
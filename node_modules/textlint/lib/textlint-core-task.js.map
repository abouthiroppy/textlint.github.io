{"version":3,"sources":["../src/textlint-core-task.js"],"names":[],"mappings":"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","file":"textlint-core-task.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst EventEmitter = require(\"events\");\nconst TraverseController = require('txt-ast-traverse').Controller;\nconst RuleContext = require(\"./rule/rule-context\");\nconst timing = require(\"./util/timing\");\nconst RuleError = require(\"./rule/rule-error\");\nconst PromiseEventEmitter = require(\"carrack\");\nconst computeLocation = require(\"./rule/compute-location\");\nconst traverseController = new TraverseController();\nconst debug = require(\"debug\")(\"textlint:core-task\");\nclass RuleTypeEmitter extends PromiseEventEmitter {\n    constructor(){\n        super();\n        this.setMaxListeners(0);\n    }\n}\nexport default class TextLintCoreTask extends EventEmitter {\n    static get events() {\n        return {\n            // receive start event\n            start: \"start\",\n            // receive message from each rules\n            message: \"message\",\n            // receive complete event\n            complete: \"complete\"\n        };\n    }\n\n    constructor({config, rules, rulesConfig, sourceCode}) {\n        super();\n        this.config = config;\n        this.rules = rules;\n        this.rulesConfig = rulesConfig;\n        this.sourceCode = sourceCode;\n        this.ruleTypeEmitter = new RuleTypeEmitter();\n        /**\n         * push new RuleError to results\n         * @param {string} ruleId\n         * @param {TxtNode} node\n         * @param {number} severity\n         * @param {RuleError|any} error error is a RuleError instance or any data\n         */\n        const report = ({ruleId, node, severity, error}) => {\n            debug('pushReport %s', error);\n            let {line, column} = computeLocation(node, error);\n            // add TextLintMessage\n            let message = {\n                ruleId: ruleId,\n                message: error.message,\n                // See https://github.com/textlint/textlint/blob/master/typing/textlint.d.ts\n                line: line,        // start with 1(1-based line number)\n                column: column + 1,// start with 1(1-based column number)\n                severity: severity // it's for compatible ESLint formatter\n            };\n            if (!(error instanceof RuleError)) {\n                // `error` is a any data.\n                const data = error;\n                message.data = data;\n            }\n            this.emit(TextLintCoreTask.events.message, message);\n        };\n\n        this._setupRuleCreatorListener(report);\n    }\n\n    _setupRuleCreatorListener(report) {\n        const rules = this.rules;\n        const config = this.config;\n        const rulesConfig = this.rulesConfig;\n        const textLintConfig = config;\n        const sourceCode = this.sourceCode;\n        Object.keys(rules).forEach(key => {\n            const ruleCreator = rules[key];\n            const ruleConfig = rulesConfig[key];\n            try {\n                const ruleContext = new RuleContext(key, sourceCode, report, textLintConfig, ruleConfig);\n                const rule = ruleCreator(ruleContext, ruleConfig);\n                this._addListenRule(key, rule);\n            } catch (ex) {\n                ex.message = `Error while loading rule '${ key }': ${ ex.message }`;\n                throw ex;\n            }\n        });\n    }\n\n    // add all the node types as listeners\n    _addListenRule(key, rule) {\n        Object.keys(rule).forEach(nodeType => {\n            this.ruleTypeEmitter.on(nodeType, timing.enabled\n                ? timing.time(key, rule[nodeType])\n                : rule[nodeType]);\n        });\n    }\n\n    /**\n     * Process ast tree.\n     * You can listen message by `task.on(\"message\", message => {})`\n     * @param {TxtNode} astTree astTree is compatible TxtNode tree.\n     */\n    process(astTree) {\n        const promiseQueue = [];\n        const listenerCount = (typeof this.ruleTypeEmitter.listenerCount !== 'undefined')\n            ? this.ruleTypeEmitter.listenerCount.bind(this.ruleTypeEmitter) // Node 4.x >=\n            : EventEmitter.listenerCount.bind(EventEmitter, this.ruleTypeEmitter);// Node 0.12\n\n        this.emit(TextLintCoreTask.events.start);\n\n        const ruleTypeEmitter = this.ruleTypeEmitter;\n        traverseController.traverse(astTree, {\n            enter(node, parent) {\n                const type = node.type;\n                Object.defineProperty(node, 'parent', {value: parent});\n                if (listenerCount(type) > 0) {\n                    let promise = ruleTypeEmitter.emit(type, node);\n                    promiseQueue.push(promise);\n                }\n            },\n            leave(node) {\n                const type = `${node.type}:exit`;\n                if (listenerCount(type) > 0) {\n                    let promise = ruleTypeEmitter.emit(type, node);\n                    promiseQueue.push(promise);\n                }\n            }\n        });\n        Promise.all(promiseQueue).then(() => {\n            this.emit(TextLintCoreTask.events.complete);\n        });\n    }\n}"]}
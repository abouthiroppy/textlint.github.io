{"version":3,"sources":["../src/textlint-core.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;;;;;mCAgB4B,yBAAyB;;sCACrB,0BAA0B;;kCAC9B,sBAAsB;;;AAb/D,IAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACpC,IAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC;AACpD,IAAM,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC;AAClE,IAAM,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC;AACpD,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,IAAM,WAAW,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AACnD,IAAM,gBAAgB,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;AAC9D,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC;AAChD,IAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAKxC,SAAS,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;AACtC,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAI;AAClC,cAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,GAC5B,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAChC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;KACzB,CAAC,CAAC;CACN;;IAEoB,YAAY;AAClB,aADM,YAAY,GACJ;YAAb,MAAM,yDAAG,EAAE;;8BADN,YAAY;;;AAGzB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,YAAI,CAAC,WAAW,GAAG,EAAE,CAAC;;;AAGtB,YAAI,CAAC,UAAU,GAAG,CACd,sCAAsB,MAAM,CAAC,EAC7B,kCAAkB,MAAM,CAAC,CAC5B,CAAC;KACL;;;;iBAZgB,YAAY;;eAejB,sBAAC,UAAU,EAAE;;AAErB,gBAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;SACxD;;;;;;;;;;eAQS,sBAA+B;gBAA9B,KAAK,yDAAG,EAAE;gBAAE,WAAW,yDAAG,EAAE;;AACnC,gBAAM,kBAAkB,GAAG,SAArB,kBAAkB,CAAI,KAAK,EAAK;AAClC,oBAAI,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACtC,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AAC9B,wBAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AAC/B,wBAAI,OAAO,WAAW,KAAK,UAAU,EAAE;AACnC,8BAAM,IAAI,KAAK,0BAAyB,GAAG,sBAAoB,CAAC;qBACnE;;AAED,wBAAM,UAAU,GAAG,WAAW,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;AACnD,wBAAI,UAAU,KAAK,KAAK,EAAE;AACtB,6BAAK,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;AAC5B,mCAAW,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;qBACjC;iBAEJ,CAAC,CAAC;AACH,uBAAO,WAAW,CAAC;aACtB,CAAC;AACF,gBAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACvC,gBAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SAClC;;;eAEsB,iCAAC,IAAI,EAAE,QAAQ,EAAE;;;AACpC,gBAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACzB,gBAAI,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC5D,kBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AAC9B,oBAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AAC/B,oBAAM,UAAU,GAAG,MAAK,WAAW,CAAC,GAAG,CAAC,CAAC;AACzC,oBAAI;AACA,wBAAI,WAAW,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,gBAAgB,EAAE,MAAK,MAAM,EAAE,UAAU,CAAC,CAAC;AAClF,wBAAI,IAAI,GAAG,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;AAChD,iCAAa,CAAC,GAAG,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;iBAC9C,CAAC,OAAO,EAAE,EAAE;AACT,sBAAE,CAAC,OAAO,kCAAiC,GAAG,WAAQ,EAAE,CAAC,OAAO,AAAG,CAAC;AACpE,0BAAM,EAAE,CAAC;iBACZ;aACJ,CAAC,CAAC;AACH,mBAAO,gBAAgB,CAAC;SAC3B;;;;;;;eAKS,sBAAG;;SAEZ;;;eAEe,0BAAC,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE;AAC7C,kBAAM,CAAC,SAAS,kCAAgC,GAAG,CAAG,CAAC;;uCACrB,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC;;gBAAnD,UAAU,wBAAV,UAAU;gBAAE,WAAW,wBAAX,WAAW;;AAC9B,kBAAM,CAAC,OAAO,UAAU,KAAK,UAAU,IAAI,OAAO,WAAW,KAAK,UAAU,yDACjB,CAAC;AAC5D,gBAAM,GAAG,GAAG,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACvC,gBAAI,YAAY,GAAG,EAAE,CAAC;AACtB,gBAAM,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACtE,gBAAM,aAAa,GAAG,AAAC,OAAO,gBAAgB,CAAC,aAAa,KAAK,WAAW,GACtE,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC;cACrD,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;AACtE,8BAAkB,CAAC,QAAQ,CAAC,GAAG,EAAE;AAC7B,qBAAK,EAAA,eAAC,IAAI,EAAE,MAAM,EAAE;AAChB,wBAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACvB,0BAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAC,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC;AACvD,wBAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACzB,4BAAI,OAAO,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChD,oCAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC9B;iBACJ;AACD,qBAAK,EAAA,eAAC,IAAI,EAAE;AACR,wBAAM,IAAI,GAAM,IAAI,CAAC,IAAI,UAAO,CAAC;AACjC,wBAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACzB,4BAAI,OAAO,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChD,oCAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC9B;iBACJ;aACJ,CAAC,CAAC;AACH,mBAAO,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,YAAM;AACxC,oBAAI,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;AACzC,oBAAI,MAAM,GAAG,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC7C,oBAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,EAAE;AACzB,0BAAM,CAAC,QAAQ,eAAa,GAAG,MAAG,CAAC;iBACtC;AACD,sBAAM,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,mDAAmD,CAAC,CAAC;AAC5G,uBAAO,MAAM,CAAC;aACjB,CAAC,CAAC;SACN;;;;;;;;;;;eASO,kBAAC,IAAI,EAAgB;gBAAd,GAAG,yDAAG,MAAM;;AACvB,gBAAM,SAAS,GAAG,qDAA2B,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACnE,mBAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;SACtD;;;;;;;;;;eAQW,sBAAC,IAAI,EAAE;AACf,gBAAM,GAAG,GAAG,KAAK,CAAC;AAClB,gBAAM,SAAS,GAAG,qDAA2B,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACnE,mBAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;SACtD;;;;;;;;;eAOO,kBAAC,QAAQ,EAAE;AACf,gBAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,QAAQ,CAAC,CAAC;AAC/D,gBAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC3C,gBAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;AACxD,gBAAM,SAAS,GAAG,qDAA2B,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACnE,mBAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;SACxE;;;WAnJgB,YAAY;;;qBAAZ,YAAY","file":"textlint-core.js","sourcesContent":["// LICENSE : MIT\n'use strict';\n/*\n    textlint-core.js is a class\n    textlint.js is a singleton object that is instance of textlint-core.js.\n */\nconst Promise = require(\"bluebird\");\nconst EventEmitter = require(\"events\").EventEmitter;\nconst TraverseController = require('txt-ast-traverse').Controller;\nconst traverseController = new TraverseController();\nconst path = require('path');\nconst fs = require('fs');\nconst assert = require('assert');\nconst RuleContext = require('./rule/rule-context');\nconst RuleContextAgent = require(\"./rule/rule-context-agent\");\nconst debug = require('debug')('textlint:core');\nconst timing = require(\"./util/timing\");\nimport {getProcessorMatchExtension} from \"./util/proccesor-helper\";\nimport {Processor as MarkdownProcessor} from \"textlint-plugin-markdown\";\nimport {Processor as TextProcessor} from \"textlint-plugin-text\";\n// add all the node types as listeners\nfunction addListenRule(key, rule, target) {\n    Object.keys(rule).forEach(nodeType => {\n        target.on(nodeType, timing.enabled\n            ? timing.time(key, rule[nodeType])\n            : rule[nodeType]);\n    });\n}\n\nexport default class TextlintCore {\n    constructor(config = {}) {\n        // this.config often is undefined.\n        this.config = config;\n        this.rules = {};\n        this.rulesConfig = {};\n        // FIXME: in the future, this.processors is empty by default.\n        // Markdown and Text are for backward compatibility.\n        this.processors = [\n            new MarkdownProcessor(config),\n            new TextProcessor(config)\n        ];\n    }\n\n    // unstable API\n    addProcessor(Processtor) {\n        // add first\n        this.processors.unshift(new Processtor(this.config));\n    }\n\n    /**\n     * Register rules to EventEmitter.\n     * if want to release rules, please call {@link this.resetRules}.\n     * @param {object} rules rule objects array\n     * @param {object} [rulesConfig] ruleConfig is object\n     */\n    setupRules(rules = {}, rulesConfig = {}) {\n        const ignoreDisableRules = (rules) => {\n            let resultRules = Object.create(null);\n            Object.keys(rules).forEach(key => {\n                const ruleCreator = rules[key];\n                if (typeof ruleCreator !== 'function') {\n                    throw new Error(`Definition of rule '${ key }' was not found.`);\n                }\n                // \"rule-name\" : false => disable\n                const ruleConfig = rulesConfig && rulesConfig[key];\n                if (ruleConfig !== false) {\n                    debug('use \"%s\" rule', key);\n                    resultRules[key] = rules[key];\n                }\n\n            });\n            return resultRules;\n        };\n        this.rules = ignoreDisableRules(rules);\n        this.rulesConfig = rulesConfig;\n    }\n\n    _createRuleContextAgent(text, filePath) {\n        const rules = this.rules;\n        let ruleContextAgent = new RuleContextAgent(text, filePath);\n        Object.keys(rules).forEach(key => {\n            const ruleCreator = rules[key];\n            const ruleConfig = this.rulesConfig[key];\n            try {\n                let ruleContext = new RuleContext(key, ruleContextAgent, this.config, ruleConfig);\n                let rule = ruleCreator(ruleContext, ruleConfig);\n                addListenRule(key, rule, ruleContextAgent);\n            } catch (ex) {\n                ex.message = `Error while loading rule '${ key }': ${ ex.message }`;\n                throw ex;\n            }\n        });\n        return ruleContextAgent;\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     */\n    resetRules() {\n        // noop\n    }\n\n    _lintByProcessor(processor, text, ext, filePath) {\n        assert(processor, `processor is not found for ${ext}`);\n        const {preProcess, postProcess} = processor.processor(ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            `processor should implement {preProcess, postProcess}`);\n        const ast = preProcess(text, filePath);\n        let promiseQueue = [];\n        const ruleContextAgent = this._createRuleContextAgent(text, filePath);\n        const listenerCount = (typeof ruleContextAgent.listenerCount !== 'undefined')\n            ? ruleContextAgent.listenerCount.bind(ruleContextAgent) // Node 4.x >=\n            : EventEmitter.listenerCount.bind(EventEmitter, ruleContextAgent);// Node 0.12\n        traverseController.traverse(ast, {\n            enter(node, parent) {\n                const type = node.type;\n                Object.defineProperty(node, 'parent', {value: parent});\n                if (listenerCount(type) > 0) {\n                    let promise = ruleContextAgent.emit(type, node);\n                    promiseQueue.push(promise);\n                }\n            },\n            leave(node) {\n                const type = `${node.type}:exit`;\n                if (listenerCount(type) > 0) {\n                    let promise = ruleContextAgent.emit(type, node);\n                    promiseQueue.push(promise);\n                }\n            }\n        });\n        return Promise.all(promiseQueue).then(() => {\n            let messages = ruleContextAgent.messages;\n            let result = postProcess(messages, filePath);\n            if (result.filePath == null) {\n                result.filePath = `<Unkown${ext}>`;\n            }\n            assert(result.filePath && result.messages.length >= 0, \"postProcess should return { messages, filePath } \");\n            return result;\n        });\n    }\n\n    /**\n     * lint text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text\n     * @param {string} ext ext is extension. default: .txt\n     * @returns {TextLintResult}\n     */\n    lintText(text, ext = \".txt\") {\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._lintByProcessor(processor, text, ext);\n    }\n\n    /**\n     * lint markdown text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text markdown format text\n     * @returns {TextLintResult}\n     */\n    lintMarkdown(text) {\n        const ext = \".md\";\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._lintByProcessor(processor, text, ext);\n    }\n\n    /**\n     * lint file and return result object\n     * @param {string} filePath\n     * @returns {TextLintResult} result\n     */\n    lintFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        const text = fs.readFileSync(absoluteFilePath, 'utf-8');\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._lintByProcessor(processor, text, ext, absoluteFilePath);\n    }\n}\n"]}